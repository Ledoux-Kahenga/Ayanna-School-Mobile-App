import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'connectivity_provider.g.dart';

/// √âtat de connectivit√© de l'application
class ConnectivityState {
  final List<ConnectivityResult> results;
  final bool isConnected;
  final bool hasWifi;
  final bool hasMobile;
  final bool hasEthernet;

  const ConnectivityState({
    required this.results,
    required this.isConnected,
    required this.hasWifi,
    required this.hasMobile,
    required this.hasEthernet,
  });

  factory ConnectivityState.fromResults(List<ConnectivityResult> results) {
    return ConnectivityState(
      results: results,
      isConnected: results.contains(ConnectivityResult.wifi) ||
          results.contains(ConnectivityResult.mobile) ||
          results.contains(ConnectivityResult.ethernet),
      hasWifi: results.contains(ConnectivityResult.wifi),
      hasMobile: results.contains(ConnectivityResult.mobile),
      hasEthernet: results.contains(ConnectivityResult.ethernet),
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConnectivityState &&
          runtimeType == other.runtimeType &&
          results.length == other.results.length &&
          results.every((element) => other.results.contains(element));

  @override
  int get hashCode => results.hashCode;

  @override
  String toString() {
    return 'ConnectivityState{results: $results, isConnected: $isConnected, hasWifi: $hasWifi, hasMobile: $hasMobile, hasEthernet: $hasEthernet}';
  }
}

/// Provider pour surveiller les changements de connectivit√© en temps r√©el
@riverpod
class ConnectivityNotifier extends _$ConnectivityNotifier {
  StreamSubscription<List<ConnectivityResult>>? _subscription;

  @override
  ConnectivityState build() {
    // Initialiser l'√©tat avec aucune connectivit√©
    final initialState = ConnectivityState.fromResults([
      ConnectivityResult.none,
    ]);

    // D√©marrer l'√©coute des changements
    _startListening();

    // Effectuer une v√©rification initiale
    _checkInitialConnectivity();

    // Nettoyer lors de la destruction
    ref.onDispose(() {
      _subscription?.cancel();
    });

    return initialState;
  }

  void _startListening() {
    _subscription?.cancel();

    _subscription = Connectivity().onConnectivityChanged.listen(
      (List<ConnectivityResult> results) {
        print('üåê [CONNECTIVITY] Changement d√©tect√©: $results');
        final newState = ConnectivityState.fromResults(results);
        print(
          'üåê [CONNECTIVITY] Nouvel √©tat: isConnected=${newState.isConnected}, hasWifi=${newState.hasWifi}, hasMobile=${newState.hasMobile}, hasEthernet=${newState.hasEthernet}',
        );

        // √âmettre seulement si l'√©tat a vraiment chang√©
        if (state != newState) {
          print('üåê [CONNECTIVITY] √âtat chang√©, mise √† jour du state');
          state = newState;
        } else {
          print('üåê [CONNECTIVITY] √âtat inchang√©, pas de mise √† jour');
        }
      },
      onError: (error) {
        print('‚ùå [CONNECTIVITY] Erreur surveillance connectivit√©: $error');
        state = ConnectivityState.fromResults([ConnectivityResult.none]);
      },
    );
  }

  Future<void> _checkInitialConnectivity() async {
    try {
      print(
        'üåê [CONNECTIVITY] D√©marrage v√©rification connectivit√© initiale...',
      );
      final results = await Connectivity().checkConnectivity();
      print('üåê [CONNECTIVITY] Connectivit√© initiale d√©tect√©e: $results');
      final newState = ConnectivityState.fromResults(results);
      print(
        'üåê [CONNECTIVITY] Nouvel √©tat calcul√©: isConnected=${newState.isConnected}, hasWifi=${newState.hasWifi}, hasMobile=${newState.hasMobile}, hasEthernet=${newState.hasEthernet}',
      );
      state = newState;
    } catch (e) {
      print('‚ùå [CONNECTIVITY] Erreur v√©rification connectivit√© initiale: $e');
      state = ConnectivityState.fromResults([ConnectivityResult.none]);
    }
  }

  /// V√©rifier manuellement la connectivit√©
  Future<void> checkConnectivity() async {
    try {
      print('üåê [CONNECTIVITY] V√©rification manuelle de la connectivit√©...');
      final results = await Connectivity().checkConnectivity();
      print('üåê [CONNECTIVITY] R√©sultats manuels: $results');
      final newState = ConnectivityState.fromResults(results);
      print(
        'üåê [CONNECTIVITY] √âtat manuel calcul√©: isConnected=${newState.isConnected}, hasWifi=${newState.hasWifi}, hasMobile=${newState.hasMobile}, hasEthernet=${newState.hasEthernet}',
      );
      state = newState;
    } catch (e) {
      print('‚ùå [CONNECTIVITY] Erreur v√©rification manuelle connectivit√©: $e');
      state = ConnectivityState.fromResults([ConnectivityResult.none]);
    }
  }

  /// Forcer un √©tat de connectivit√© (utile pour les tests)
  void setConnectivityState(List<ConnectivityResult> results) {
    state = ConnectivityState.fromResults(results);
  }
}

/// Provider simple pour v√©rifier si l'appareil est connect√©
@riverpod
bool isConnected(IsConnectedRef ref) {
  final connectivity = ref.watch(connectivityNotifierProvider);
  return connectivity.isConnected;
}

/// Provider pour v√©rifier si le WiFi est disponible
@riverpod
bool hasWifi(HasWifiRef ref) {
  final connectivity = ref.watch(connectivityNotifierProvider);
  return connectivity.hasWifi;
}

/// Provider pour v√©rifier si les donn√©es mobiles sont disponibles
@riverpod
bool hasMobile(HasMobileRef ref) {
  final connectivity = ref.watch(connectivityNotifierProvider);
  return connectivity.hasMobile;
}

/// Provider pour v√©rifier si Ethernet est disponible
@riverpod
bool hasEthernet(HasEthernetRef ref) {
  final connectivity = ref.watch(connectivityNotifierProvider);
  return connectivity.hasEthernet;
}

/// Provider pour obtenir les types de connectivit√© actuels
@riverpod
List<ConnectivityResult> connectivityResults(ConnectivityResultsRef ref) {
  final connectivity = ref.watch(connectivityNotifierProvider);
  return connectivity.results;
}
